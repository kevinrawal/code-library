"""authentication route"""

from datetime import datetime, timedelta, timezone

import sys
import os
import dotenv

from fastapi import APIRouter, HTTPException, status
from fastapi.security import OAuth2PasswordBearer

from jose import jwt
from passlib.context import CryptContext
from pydantic import BaseModel

from models.users import User
from services.user_services import get_user_from_db


# THIS CODE IS TO ACCESS MODULES OUTSIDE ROUTE
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))


dotenv.load_dotenv()

SECRET_KEY = os.environ["SECRET_KEY"]
ALGORITHM = os.environ["ALGORITHM"]
ACCESS_TOKEN_EXPIRE_MINUTES = 100

router = APIRouter()


class Token(BaseModel):
    """Token Class"""

    access_token: str
    token_type: str


pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")


def verify_password(plain_password, hashed_password):
    """Verify plain password with hashed password"""
    return pwd_context.verify(plain_password, hashed_password)


def authenticate_user(email_id: str, password: str) -> dict:
    """Authenticate user based on provided email id and password,
       it matches with database hashed password and return boolean value

    Args:
        email_id (str):
        password (str):

    Returns:
        dict: return user if user is authenticated else return None
    """
    user = get_user_from_db(email_id)
    if user is not None and verify_password(password, user["password"]):
        return user
    return None


def create_access_token(data: dict, expires_delta: timedelta):
    """create jwt token for the user

    Args:
        data (dict): has user_id = unique _id generated by system for each user
        expires_delta (timedelta): time to expire the jwt token

    Returns:
        Token: jwt token
    """
    to_encode = data.copy()
    expire = datetime.now(timezone.utc) + expires_delta
    to_encode.update({"exp": expire})
    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
    return encoded_jwt


@router.post("/token")
async def login_for_access_token(user: User) -> Token:
    """This Route is used to authenticate user and return access token

    Args:
        user (User): user model given by the end user

    Raises:
        HTTPException: credecial exception

    Returns:
        Token: jwt aceess token
    """
    user_in_db = authenticate_user(user.email_id, user.password)
    if user_in_db is None:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect userid or password",
        )

    access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)

    access_token = create_access_token(
        data={"user_id": user_in_db["_id"], "email_id": user_in_db["email_id"]},
        expires_delta=access_token_expires,
    )
    return Token(access_token=access_token, token_type="bearer")
